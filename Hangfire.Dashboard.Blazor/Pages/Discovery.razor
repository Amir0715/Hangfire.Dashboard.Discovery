@page "/hangfire/discovery"
@using System.ComponentModel
@using Hangfire.Dashboard.Blazor.Core.Abstractions
@using Hangfire.Dashboard.Blazor.Core.Dtos
@using Hangfire.Dashboard.Blazor.Core.Validators


<div class="mb-2">
    <div class="d-flex gap-1">
        <QueryInput Class="flex-shrink-1 flex-grow-0" @bind-Query="@_timePaginationQuery.Data.QueryString"/>
        <div style="min-width: 250px;">
            <TimeRangePicker @bind-DateTimeRange="@_dateTimeRange"/>
        </div>
        <BitButton OnClick="SearchJobsAsync" @bind-IsLoading="@_isLoading">
            Поиск
        </BitButton>
    </div>
    <div class="d-flex justify-content-end">
        @if(!(_lastPaginationResult?.IsSuccess ?? true))
        {
            <BitMessage Color="BitColor.Error" Variant="BitVariant.Text">
                @_lastPaginationResult?.Error
            </BitMessage>
        }
        <BitDropdown NoBorder 
                     TItem="BitDropdownItem<ListSortDirection>" 
                     TValue="ListSortDirection" 
                     Items="@_sortDirections" 
                     Style="width: 150px;" 
                     @bind-Value="@_timePaginationQuery.Direction" 
                     OnChange="@(x => ResetAndLoad(x))" />
    </div>
</div>
<div>
    <JobsViewer Items="@_jobs" LoadMoreItems="LoadMoreItems" />
</div>

@code {
    private TimePaginationQuery<QueryDto> _timePaginationQuery = new()
    {
        Data = new QueryDto(),
        Direction = ListSortDirection.Descending
    };

    private ICollection<BitDropdownItem<ListSortDirection>> _sortDirections = [
        new() {Text = "newest first", Value = ListSortDirection.Descending},
        new() {Text = "oldest first", Value = ListSortDirection.Ascending}
    ];
    
    private Result<TimePaginationResult<JobContext>>? _lastPaginationResult;
    private DateTimeRange _dateTimeRange = new();
    private bool _isLoading = false;
    private IEnumerable<JobContext> _jobs = [];
    
    [Inject]
    private IJobProvider JobProvider { get; set; }

    private async Task SearchJobsAsync()
    {
        _timePaginationQuery.Data.StartDateTimeOffset = _dateTimeRange.StartDateTime;
        _timePaginationQuery.Data.EndDateTimeOffset = _dateTimeRange.EndDateTime;
        _lastPaginationResult = await JobProvider.SearchJobs(_timePaginationQuery);
        if (_lastPaginationResult.IsSuccess)
        {
            _jobs = _lastPaginationResult.Value?.Data ?? [];
        }
    }

    private async Task<IEnumerable<JobContext>> LoadMoreItems()
    {
        if (_lastPaginationResult is not { IsSuccess: true }) return [];
        _timePaginationQuery.Offset = _lastPaginationResult.Value!.NextOffset;
        
        _lastPaginationResult = await JobProvider.SearchJobs(_timePaginationQuery);
        if (_lastPaginationResult.IsSuccess)
        {
            return _lastPaginationResult.Value?.Data ?? [];
        }

        return [];
    }

    private Task ResetAndLoad(ListSortDirection newDirection)
    {
        _timePaginationQuery.Direction = newDirection;
        _timePaginationQuery.Offset = null;
        return SearchJobsAsync();
    }

}