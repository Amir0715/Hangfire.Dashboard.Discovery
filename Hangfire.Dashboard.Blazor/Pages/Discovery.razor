@page "/_hangfireBlazorDiscovery"
@using System.ComponentModel
@using Hangfire.Dashboard.Blazor.Core.Abstractions
@using Hangfire.Dashboard.Blazor.Core.Dtos
@using Hangfire.Dashboard.Blazor.Components.TagSelector
@using Hangfire.Dashboard.Blazor.Components.SimpleTimeRangePicker
@using Microsoft.Extensions.Options

<style>
    .toolbar {
        background: #2d333b;
        border: 1px solid #444c56;
        border-radius: 6px;
        padding: 0.5rem;
    }
</style>

<div class="mb-2">
    <div class="d-flex gap-1 toolbar">
        <QueryInput Class="flex-shrink-1 flex-grow-0" @bind-Query="@_timePaginationQuery.Data.QueryString"/>
        <div style="min-width: 250px;">
            <SimpleTimeRangePicker @bind-DateTimeRange="@_dateTimeRange"/>
        </div>
        <Button OnClick="SearchJobsAsync" IsLoading="@_isLoading">Run</Button>
    </div>
    <div class="d-flex toolbar justify-content-between mt-3 align-items-baseline">
        @if (!(_lastPaginationResult?.IsSuccess ?? true))
        {
            <div class="text-danger">
                <i class="bi bi-x-circle-fill"></i>
                @_lastPaginationResult?.Error
            </div>
        }
        <TagSelector
            Placeholder="Select job parameters..."
            Items="@_allJobParams"
            @bind-SelectedItems="@_showJobParams"
            NoItemsPlaceholder="No available job parameters. Change query and get more job."/>

        <Dropdown Items="@_sortDirections"
                  TItem="ListSortDirection"
                  SelectedItem="@_timePaginationQuery.Direction"
                  SelectedItemChanged="@ResetAndLoad"/>
    </div>
</div>
<div>
    <JobsViewer Items="@_jobs" LoadMoreItems="@LoadMoreItems" ShowJobParams="@_showJobParams"/>
</div>

@code {

    private TimePaginationQuery<QueryDto> _timePaginationQuery = new()
    {
        Data = new QueryDto(),
        Direction = ListSortDirection.Descending
    };

    private ICollection<ListSortDirection> _sortDirections = Enum.GetValues<ListSortDirection>();

    private Result<TimePaginationResult<JobContext>>? _lastPaginationResult;
    private DateTimeRange _dateTimeRange = new();
    private bool _isLoading = false;
    private IEnumerable<JobContext> _jobs = [];

    [Inject]
    private IJobProvider JobProvider { get; set; }
    
    [Inject]
    private IOptions<HangfireDiscoveryOptions> HangfireDiscoveryOptions { get; set; }

    private HashSet<string> _allJobParams = [];
    private ICollection<string> _showJobParams = [];

    protected override void OnInitialized()
    {
        _dateTimeRange.StartDateTime = DateTimeOffset.UtcNow.Add(-HangfireDiscoveryOptions.Value.StartDateTimeOffsetByNow);
        _timePaginationQuery.Data.QueryString = HangfireDiscoveryOptions.Value.StartUpQuery;
        base.OnInitialized();
    }

    private async Task SearchJobsAsync()
    {
        _timePaginationQuery.Data.StartDateTimeOffset = _dateTimeRange.StartDateTime;
        _timePaginationQuery.Data.EndDateTimeOffset = _dateTimeRange.EndDateTime;
        _isLoading = true;
        _lastPaginationResult = await JobProvider.SearchJobs(_timePaginationQuery);
        if (_lastPaginationResult.IsSuccess)
        {
            _jobs = _lastPaginationResult.Value?.Data ?? [];
        }

        _allJobParams = _jobs
            .SelectMany(j => j.Params.RootElement.EnumerateObject().Select(p => p.Name))
            .Distinct()
            .ToHashSet();
        _isLoading = false;
    }

    private async Task<IEnumerable<JobContext>> LoadMoreItems()
    {
        if (_lastPaginationResult is not { IsSuccess: true }) return [];
        _timePaginationQuery.Offset = _lastPaginationResult.Value!.NextOffset;

        _lastPaginationResult = await JobProvider.SearchJobs(_timePaginationQuery);
        if (_lastPaginationResult.IsSuccess)
        {
            var jobs = _lastPaginationResult.Value?.Data.ToList() ?? [];
            var newParams = jobs
                .SelectMany(j => j.Params.RootElement.EnumerateObject().Select(p => p.Name))
                .Distinct()
                .ToHashSet();

            _allJobParams.UnionWith(newParams);
            return jobs;
        }

        return [];
    }

    private Task ResetAndLoad(ListSortDirection newDirection)
    {
        _timePaginationQuery.Direction = newDirection;
        _timePaginationQuery.Offset = null;
        return SearchJobsAsync();
    }

}