<style>
    .relative-picker {
        display: flex;
        gap: 1rem;
        align-items: center;
    }

    .number-input {
        width: 80px;
        padding: 0.5rem;
        background: #2d333b;
        border: 1px solid #444c56;
        border-radius: 4px;
        color: #adbac7;
    }

    input::-webkit-outer-spin-button,
    input::-webkit-inner-spin-button {
        -webkit-appearance: none;
        margin: 0;
    }

    input[type=number] {
        -moz-appearance: textfield; /* Firefox */
    }

</style>

<div class="relative-picker">
    <input type="number"
           class="number-input"
           min="1"
           @bind="_amount"
           @bind:event="oninput"/>
    <Dropdown TItem="TimeUnit" SelectedItem="@_unit" SelectedItemChanged="UpdateRelativeStart" Items="@(Enum.GetValues<TimeUnit>())"/>
</div>

@code {

    [Parameter]
    public DateTimeOffset? RelativeStart { get; set; }

    [Parameter]
    public EventCallback<DateTimeOffset?> RelativeStartChanged { get; set; }

    [Inject]
    public BrowserTimeService BrowserTimeService { get; set; } = null!;
    
    private int _amount = 1;
    private TimeUnit _unit = TimeUnit.Hour;

    private async Task UpdateRelativeStart(TimeUnit unit)
    {
        var now = await BrowserTimeService.BrowserNowAsync();
        _unit = unit;
        var newStart = _unit switch
        {
            TimeUnit.Minute => now.AddMinutes(-_amount),
            TimeUnit.Hour => now.AddHours(-_amount),
            TimeUnit.Day => now.AddDays(-_amount),
            TimeUnit.Month => now.AddMonths(-_amount),
            _ => throw new ArgumentOutOfRangeException()
        };

        await RelativeStartChanged.InvokeAsync(newStart);
    }

    private enum TimeUnit
    {
        Minute,
        Hour,
        Day,
        Month
    }

}