<button @attributes="AdditionalAttributes"
        class="custom-button"
        disabled="@(IsLoading || Disabled)"
        @onclick="HandleClick">
    @if (IsLoading)
    {
        <span class="button-loader"></span>
    }
    @if (Icon != null && !IsLoading)
    {
        <span class="button-icon">@Icon</span>
    }
    <span class="button-content">@ChildContent</span>
</button>

<style>
    .custom-button {
        /* Base styles */
        background: #373e47;
        border: 1px solid #444c56;
        border-radius: 4px;
        color: #adbac7;
        padding: 0.5rem 1rem;
        font-family: inherit;
        font-size: 14px;
        cursor: pointer;
        display: inline-flex;
        align-items: center;
        justify-content: center;
        gap: 0.5rem;
        transition: all 0.2s ease;
        outline: none;
        position: relative;
        min-width: 80px;
        min-height: 36px;
    }

    /* Hover state */
    .custom-button:not(:disabled):hover {
        background: #444c56;
        border-color: #539bf5;
    }

    /* Active state */
    .custom-button:not(:disabled):active {
        background: #2d333b;
        transform: translateY(1px);
    }

    /* Disabled state */
    .custom-button:disabled {
        opacity: 0.6;
        cursor: not-allowed;
    }

    /* Loading indicator */
    .button-loader {
        width: 16px;
        height: 16px;
        border: 2px solid rgba(173, 186, 199, 0.3);
        border-radius: 50%;
        border-top-color: #adbac7;
        animation: spin 1s linear infinite;
    }

    .button-content {
        transition: opacity 0.2s;
    }

    .button-icon {
        display: inline-flex;
        align-items: center;
    }

    /* Animation for loading */
    @@keyframes spin {
        to { transform: rotate(360deg); }
    }
</style>

@code {
    [Parameter] public RenderFragment? ChildContent { get; set; }
    [Parameter] public RenderFragment? Icon { get; set; }
    [Parameter] public bool IsLoading { get; set; }
    [Parameter] public bool Disabled { get; set; }
    [Parameter] public EventCallback<MouseEventArgs> OnClick { get; set; }
    [Parameter(CaptureUnmatchedValues = true)] public Dictionary<string, object>? AdditionalAttributes { get; set; }

    private async Task HandleClick(MouseEventArgs args)
    {
        if (!IsLoading && !Disabled)
        {
            await OnClick.InvokeAsync(args);
        }
    }
}