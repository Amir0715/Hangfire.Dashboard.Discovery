@using System.Text.Json
@using Hangfire.Dashboard.Blazor.Models
@using Microsoft.JSInterop
@implements IDisposable

<style>
    .job-card {
        background: #2d333b;
        border: 1px solid #444c56;
        border-radius: 8px;
        margin: 0.5rem 0;
        padding: 1rem;
        transition: box-shadow 0.2s ease;
    }

    .job-card:hover {
        box-shadow: 0 2px 8px rgba(0, 0, 0, 0.3);
    }

    .job-header {
        display: flex;
        align-items: center;
        gap: 1rem;
        margin-bottom: 0.5rem;
        flex-wrap: wrap;
    }

    .job-id-link {
        color: #539bf5;
        text-decoration: none;
        font-weight: bold;
    }

    .job-id-link:hover {
        text-decoration: underline;
    }

    .job-title {
        font-size: 1.1rem;
        color: #adbac7;
        display: flex;
        align-items: center;
        gap: 0.5rem;
    }

    .queue-tag {
        background: rgba(91, 192, 222, 0.1);
        border: 1px solid rgba(91, 192, 222, 0.3);
        color: #5bc0de;
        padding: 0.25rem 0.5rem;
        border-radius: 4px;
        font-size: 0.9rem;
    }

    .status-badge {
        padding: 0.25rem 0.5rem;
        border-radius: 4px;
        font-size: 0.8rem;
        text-transform: uppercase;
        border: 1px solid rgba(var(--state-color), 0.5);
        background: rgba(var(--state-color), 0.1);
        color: rgb(var(--state-color));
    }

    .json-preview {
        background: #1e2228;
        border: 1px solid #444c56;
        border-radius: 6px;
        padding: 0.5rem;
        margin: 0.5rem 0;
        max-height: 300px;
        overflow: auto;
        position: relative;
    }

    .json-preview pre {
        margin: 0;
        text-wrap: auto;
    }

    .json-toggle {
        position: absolute;
        bottom: 0;
        right: 0;
        background: rgba(0, 0, 0, 0.7);
        padding: 0.25rem 0.5rem;
        border-radius: 4px 0 0 0;
        cursor: pointer;
        color: #539bf5;
    }

    /* Обновленные стили для комментариев */
    .comments-container {
        display: flex;
        flex-wrap: wrap;
        gap: 0.5rem;
        margin: 0.5rem 0;
    }

    .comment-tag {
        background: rgba(65, 105, 225, 0.15);
        border: 1px solid rgba(65, 105, 225, 0.3);
        color: #5b8cff;
        padding: 0.25rem 0.75rem;
        border-radius: 15px;
        font-size: 0.9rem;
        display: inline-flex;
        align-items: center;
        gap: 0.5rem;
    }

    /* Стили для кнопки деталей */
    .toggle-details-btn {
        background: #373e47;
        border: 1px solid #444c56;
        color: #adbac7;
        padding: 0.5rem 1rem;
        border-radius: 8px;
        display: inline-flex;
        align-items: center;
        gap: 0.5rem;
        transition: all 0.2s ease;: 0.5 rem 0;
    }

    .toggle-details-btn:hover {
        background: #444c56;
        transform: translateY(-1px);
    }

    .toggle-icon {
        transition: transform 0.2s ease;
    }

    .toggle-icon.expanded {
        transform: rotate(180deg);
    }

    .exception-tag {
        background: rgba(220, 53, 69, 0.15);
        border: 1px solid rgba(220, 53, 69, 0.3);
        color: rgb(220 53 69);
    }

    .details-panel {
        border-top: solid 1px gray;
        padding-top: 1rem;
        margin-top: 1rem;
    }

    .job-created-at {
        margin-left: auto;
    }

    .jobs {
        max-height: calc(100vh - 200px);
        overflow-y: auto;
        margin-top: 0.5rem;
        scrollbar-width: thin;
        scrollbar-color: #adbac7 #2d343c;
        padding-right: 5px;
    }
</style>

<div class="jobs">
    @foreach (var job in _items)
    {
        <div class="job-card">
            <div class="job-header">
                <a class="job-id-link" href="@($"/hangfire/jobs/details/{job.JobContext.Id}")" title="Job Id">#@job.JobContext.Id</a>
                <span class="status-badge @job.JobContext.State.ToLower()" title="Last state">@job.JobContext.State</span>
                <div class="job-title">
                    <span title="Job Name">@job.JobContext.JobName</span>
                    <span class="queue-tag" title="Job queue">@job.JobContext.Queue</span>
                </div>
                <span class="job-created-at" title="Created At (Browser Time)">@job.JobContext.CreatedAt.ToOffset(_browserTimeSpan).LocalDateTime</span>
            </div>

            <!-- В карточке задачи -->
            <div class="comments-container">
                @if (!string.IsNullOrEmpty(job.JobContext.ExceptionMessage))
                {
                    <div class="comment-tag exception-tag" title="Exception">
                        <span>@job.JobContext.ExceptionType:</span>
                        <span>@job.JobContext.ExceptionMessage</span>
                    </div>
                }

                @foreach (var param in GetVisibleParams(job.JobContext))
                {
                    <div class="comment-tag" title="@param.Key">
                        <span>@param.Key:</span>
                        <span class="tag-value">@FormatJsonValue(param.Value)</span>
                    </div>
                }
            </div>

            <button class="toggle-details-btn" @onclick="@(() => ToggleDetails(job))">
                <span>@(job.Expanded ? "Expand" : "Collapse")</span>
                <i class="bi bi-chevron-down toggle-icon @(job.Expanded ? "expanded" : "")"></i>
            </button>

            @if (job.Expanded)
            {
                <div class="details-panel">
                    <h4>Arguments</h4>
                    <div class="json-preview">
                        <pre>@PrettyPrintJson(job.JobContext.Args?.RootElement)</pre>
                    </div>

                    <h4>Parameters</h4>
                    <div class="json-preview">
                        <pre>@PrettyPrintJson(job.JobContext.Params?.RootElement)</pre>
                    </div>

                    @if (job.JobContext.StateData != null)
                    {
                        <h4>State</h4>
                        <div class="json-preview">
                            <pre>@PrettyPrintJson(job.JobContext.StateData.RootElement)</pre>
                        </div>
                    }
                </div>
            }
        </div>
    }
    @if (_isLoadingMore)
    {
        <div class="loading-indicator">
            Loading...
        </div>
    }
    @if (_notMoreItems)
    {
        <div>No more jobs</div>
    }

    <div @ref="@_intersectionObserverTargetElement" style="width: 1px;"></div>
</div>

<script>
    function registerScrollHandler(element, dotNetInstance) {
        let observer = new IntersectionObserver(async (entries) => {
            if (entries[0].isIntersecting) {
                await dotNetInstance.invokeMethodAsync('CallLoadMoreItems');
            }
        }, {threshold: 1.0});

        observer.observe(element);
    }

    function unregisterScrollHandler(element) {
        // Логика для отключения observer
    }
</script>

@code {

    [Parameter]
    public IEnumerable<JobContext> Items { get; set; }

    private List<JobModel> _items = [];

    [Parameter]
    public Func<Task<IEnumerable<JobContext>>> LoadMoreItems { get; set; }

    [Parameter]
    public ICollection<string> ShowJobParams { get; set; } = [];

    [Inject]
    public IJSRuntime JsRuntime { get; set; } = null!;

    [Inject]
    public BrowserTimeService BrowserTimeService { get; set; } = null!;

    private ElementReference _intersectionObserverTargetElement;
    private bool _isLoadingMore;
    private bool _notMoreItems;
    private TimeSpan _browserTimeSpan;
    private DotNetObjectReference<JobsViewer>? _dotNetObjectReference;

    protected override async Task OnInitializedAsync()
    {
        _browserTimeSpan = await BrowserTimeService.GetBrowserOffsetAsync();
        await base.OnInitializedAsync();
    }

    protected override async Task OnParametersSetAsync()
    {
        if (Items == null && LoadMoreItems != null)
        {
            Items = await LoadMoreItems.Invoke();
        }

        if (Items == null && LoadMoreItems == null)
        {
            Items = [];
        }

        _items = Items?.Select(x => new JobModel(x)).ToList() ?? [];

        await base.OnParametersSetAsync();
        StateHasChanged();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            _dotNetObjectReference = DotNetObjectReference.Create(this);
            await JsRuntime.InvokeVoidAsync("registerScrollHandler", _intersectionObserverTargetElement, _dotNetObjectReference);
        }

        await base.OnAfterRenderAsync(firstRender);
    }

    [JSInvokable]
    public async Task CallLoadMoreItems()
    {
        if (LoadMoreItems == null || _notMoreItems || _isLoadingMore || _items.Count == 0) return;

        _isLoadingMore = true;
        StateHasChanged();

        try
        {
            var moreItems = await LoadMoreItems.Invoke();
            if (!moreItems.Any())
            {
                _notMoreItems = true;
                return;
            }

            _items.AddRange(moreItems.Select(x => new JobModel(x)));
        }
        finally
        {
            _isLoadingMore = false;
            StateHasChanged();
        }
    }

    private IEnumerable<KeyValuePair<string, JsonElement>> GetVisibleParams(JobContext job)
    {
        return job.Params.RootElement.EnumerateObject()
            .Where(p => ShowJobParams.Contains(p.Name))
            .ToDictionary(x => x.Name, v => v.Value);
    }

    private string FormatJsonValue(JsonElement element)
    {
        return element.ToString();
    }

    private void ToggleDetails(JobModel job)
    {
        job.Expanded = !job.Expanded;
    }

    private static JsonSerializerOptions SerializerOptions = new()
    {
        WriteIndented = true,
        Encoder = System.Text.Encodings.Web.JavaScriptEncoder.UnsafeRelaxedJsonEscaping
    };

    private string PrettyPrintJson(JsonElement? element)
    {
        return JsonSerializer.Serialize(element, SerializerOptions);
    }

    public void Dispose()
    {
        foreach (var job in Items)
        {
            job.Dispose();
        }

        if (_dotNetObjectReference != null)
        {
            JsRuntime.InvokeVoidAsync("unregisterScrollHandler", _intersectionObserverTargetElement);
            _dotNetObjectReference.Dispose();
        }
    }
}