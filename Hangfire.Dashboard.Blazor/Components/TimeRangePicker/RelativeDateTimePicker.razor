<BitStack Horizontal Class="column-gap-2">
    <BitNumberField TValue="int" @bind-Value="@RelativeInput" Min="1"></BitNumberField>
    <BitDropdown Items="RelativeItems" @bind-Value="@RelativeSelected"></BitDropdown>
</BitStack>

@code {
    [Parameter]
    public EventCallback<DateTimeOffset> RelativeStartChanged { get; set; }

    private int RelativeInput
    {
        get => _relativeInput;
        set
        {
            if (_relativeInput == value) return;
            
            _relativeInput = value;
            RaiseRelativeStartChanged();
        }
    }

    private Relative RelativeSelected
    {
        get => _relativeSelected;
        set
        {
            if (_relativeSelected == value) return;
            
            _relativeSelected = value;
            RaiseRelativeStartChanged();
        }
    }

    private Relative _relativeSelected = Relative.Day;
    private int _relativeInput = 1;

    private Task RaiseRelativeStartChanged()
    {
        var now = DateTimeOffset.Now;
        switch (_relativeSelected)
        {
            case Relative.Hour:
                now = now.AddHours(-_relativeInput);
                break;
            case Relative.Day:
                now = now.AddDays(-_relativeInput);
                break;
            case Relative.Month:
                now = now.AddMonths(-_relativeInput);
                break;
            default:
                throw new ArgumentOutOfRangeException();
        }

        return RelativeStartChanged.InvokeAsync(now);
    }

    private static readonly List<BitDropdownItem<Relative>> RelativeItems = Enum.GetValues<Relative>().Select(x => new BitDropdownItem<Relative>()
    {
        Text = x.ToString(),
        Value = x
    }).ToList();
    
    private enum Relative
    {
        Hour,
        Day,
        Month,
    }
}